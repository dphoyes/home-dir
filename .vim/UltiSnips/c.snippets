
###########################################################################
#                            TextMate Snippets                            #
###########################################################################

snippet summary "Summary for top of file" !b
/*
 * ${1:`!p snip.rv = os.path.basename(os.getcwd())`} 
 * `!p snip.rv = snip.fn` 
 *
 * David Hoyes
 */
endsnippet

snippet def "#ifndef ... #define ... #endif" !
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif
endsnippet

snippet inc "#include local header (inc)" !
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet Inc "#include <> (Inc)" !
#include <${1:.h}>
endsnippet

snippet mark "#pragma mark (mark)" !
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet Main "main() (main)" !
int main(void)
  {
    $0
    return 0;
  }
endsnippet

snippet main "main() (main)" !
int main(int argc, char const *argv[])
  {
    $0
    return 0;
  }
endsnippet

snippet for "for int loop (fori)" !
for (${1:int }${2:i} = 0; $2 < ${3:count}; $2++)
  {
    $0
  }
endsnippet

snippet forr "Custom for loop" 
for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++})
  {
    $0
  }
endsnippet

snippet "^func" "Function Declaration" r 
/*
 * $2
 */
$1 $2 ($3);
${1:void} ${2:function_name} (${3:void})
{
  $0
}
endsnippet

snippet " func" "Function Declaration" r
 $1 $2 ($3);
 ${1:void} ${2:function_name} (${3:void})
   {
     $0
   }
endsnippet

snippet enum "Enumeration" !
typedef enum
{
  $0
} ${1:name};
endsnippet

snippet once "Include header once only guard" !
`!p
import random, string
name = '_' + re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
headerDefine = ('%s_%s' % (name,rand)).upper()
`#ifndef `!p snip.rv = headerDefine`
#define `!p snip.rv = headerDefine`

${0}

#endif /* end of include guard: `!p snip.rv = headerDefine` */

endsnippet

snippet Once "Include header guard, with custom definition" !
#ifndef ${1:`!p
if not snip.c:
  import random, string
  name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
  rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
  snip.rv = ('%s_%s' % (name,rand)).upper()
else:
    snip.rv = snip.c`}
#define $1

${0}

#endif /* end of include guard: $1 */

endsnippet

snippet td "Typedef" !
typedef ${1:int} ${2:MyCustomType};
endsnippet

snippet do "do...while loop (do)" !
do
  {
    $0
  } while(${1:/* condition */});
endsnippet

snippet while "while .. loop"
while(${1:/* condition */})
  {
    $0
  }
endsnippet

snippet fprintf "fprintf ..." !
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet if "if .. (if)" !
if (${1:/* condition */})
  {
    $0
  }
endsnippet

snippet elif "else if .. (elif)"
else if (${1:/* condition */})
  {
    $0
  }
endsnippet

snippet else "else .."
else
  {
    $0
  }
endsnippet

snippet printf "printf .. (printf)" !
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet st "Structure" !
typedef struct
{
  $0
} ${1:name};
endsnippet

snippet t "Tertiary conditional"
${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet


# vim:ft=snippets:
