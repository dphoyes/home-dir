" Vim Configuration File

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching
set expandtab
set smarttab
set tabstop=4
set shiftwidth=4
set nowrap
set nobackup

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

function Imodepaste()
  if col("$") == 1
    exe "normal a \<ESC>\<C-V>"
  elseif col(".") == 1
    exe "normal \<C-V>"
  elseif col(".") == col("$")-1
    exe "normal a \<ESC>\<C-V>"
  else
    exe "normal l\<C-V>"
  endif
endfunction
 
" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>
nmap <C-V> "+gP
imap <C-V> <ESC>:call Imodepaste()<CR>i
vmap <C-C> "+y

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

au BufNewFile,BufRead *.frag,*.vert,*.fp,*.vp,*.glsl set filetype=glsl 
au BufNewFile,BufRead *.cc set filetype=cpp 

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  autocmd FileType c set tabstop=2|set shiftwidth=2
  autocmd FileType cpp set tabstop=2|set shiftwidth=2
  autocmd FileType css set tabstop=2|set shiftwidth=2
  autocmd FileType scss set tabstop=2|set shiftwidth=2
  autocmd FileType html.twig set tabstop=2|set shiftwidth=2
  autocmd FileType python set tabstop=4|set shiftwidth=4
  autocmd FileType yaml set tabstop=4|set shiftwidth=4
  autocmd FileType asm set tabstop=7|set shiftwidth=7|set noexpandtab

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

" Write as root

function SudoWrite ()
  setlocal autoread
  w !sudo tee >/dev/null %
  set autoread<
endfunction

cmap w!! set autoread \| w !sudo tee >/dev/null %
set wildchar=<Tab> wildmenu wildmode=full

:nmap ,] 0vf{%

au FileType c,cpp,h,hpp setlocal cinoptions=>4,n-2,{2,^-2,:2,=2,g0,h2,p5,t0,+2,(0,u0,w1,m1

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" Add highlighting for function definition in C++
function! EnhanceCppSyntax()
  syn match cppFuncDef "::\~\?\zs\h\w*\ze([^)]*\()\s*\(const\)\?\)\?$"
  hi def link cppFuncDef Special
endfunction

autocmd Syntax cpp call EnhanceCppSyntax() 
